apiServer:
  image:
    repository: registry.k8s.io/kube-apiserver
    pullPolicy: IfNotPresent
    tag: "v{{ $.Values.version }}"
  replicas: 2
  service:
    annotations:
    labels:
    # Set everything allowed in ServiceSpec here
    # Do not set a selector or add the apiserver 6443 port, that's handled by the chart.
    spec:
      type: ClusterIP

clusterDomain: cluster.local

clusterName: ~ # required

controllerManager:
  image:
    repository: registry.k8s.io/kube-controller-manager
    pullPolicy: IfNotPresent
    tag: "v{{ $.Values.version }}"
  replicas: 2

etcd:
  # a cert-manager issuerRef that can provide a client certificate for the etcd endpoint
  # https://cert-manager.io/docs/reference/api-docs/#meta.cert-manager.io/v1.ObjectReference
  certIssuer: # required
    # name: etcd
    # kind: ClusterIssuer
  endpoints: []
  # It's assumed that this control plane is using a multi-tenanted etcd cluster with RBAC enabled,
  # and thus the compaction API is not permitted.
  compactionInterval: "0"
  prefix: "/{{ $.Values.clusterName }}/"

# the hostname used to externally access this apiserver
externalHostname: ~ # required

konnectivity:
  enabled: true
  agent:
    image: registry.k8s.io/kas-network-proxy/proxy-agent:v0.30.3
    replicas: 1
  port: 8091
  server:
    image: registry.k8s.io/kas-network-proxy/proxy-server:v0.30.2

parentClusterDomain: cluster.local

scheduler:
  image:
    repository: registry.k8s.io/kube-scheduler
    pullPolicy: IfNotPresent
    tag: "v{{ $.Values.version }}"
  replicas: 2

# Can be either an IPv4 subnet, an IPv6 subnet, or exactly one of each.
serviceCIDRs: []

version: 1.30.2
