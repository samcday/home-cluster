apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: homepage
  namespace: cloud-cluster
spec:
  chart:
    spec:
      chart: charts/resources
      reconcileStrategy: Revision
      sourceRef:
        kind: GitRepository
        name: home-cluster
        namespace: flux-system
  dependsOn:
    - name: namespaces
  driftDetection:
    mode: enabled
  interval: 1h
  kubeConfig:
    secretRef:
      name: admin-kubeconfig
  storageNamespace: homepage
  targetNamespace: homepage
  values:
    caddy-deployment:
      apiVersion: apps/v1
      kind: Deployment
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: caddy
        template:
          metadata:
            labels:
              app.kubernetes.io/name: caddy
          spec:
            containers:
              - image: caddy:2-alpine
                name: caddy
                command:
                  - caddy
                  - file-server
                  - --root
                  - /static
                  - --access-log
                volumeMounts:
                  - name: matrix-well-known
                    mountPath: /static/.well-known/matrix
            volumes:
              - name: matrix-well-known
                configMap:
                  name: matrix-well-known
    caddy-service:
      apiVersion: v1
      kind: Service
      spec:
        ports:
          - port: 80
            protocol: TCP
            targetPort: 80
        selector:
          app.kubernetes.io/name: caddy
    ingress:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        annotations:
          nginx.ingress.kubernetes.io/enable-cors: "true"
      spec:
        ingressClassName: public-nginx
        rules:
          - host: samcday.com
            http:
              paths:
                - backend:
                    service:
                      name: caddy-service
                      port:
                        number: 80
                  path: /
                  pathType: Prefix
          - host: samcday.com
            http:
              paths:
                - backend:
                    service:
                      name: webfinger-generic
                      port:
                        number: 80
                  path: /.well-known/webfinger
                  pathType: Prefix
        tls:
          - hosts: [samcday.com]
            secretName: certificate
    matrix-well-known:
      apiVersion: v1
      kind: ConfigMap
      data:
        client: |-
          {
            "m.homeserver": {
              "base_url": "https://homeserver.samcday.com"
            },
            "org.matrix.msc3575.proxy": {
                "url": "https://homeserver.samcday.com"
            }
          }
        server: |-
          {
              "m.server": "homeserver.samcday.com:443"
          }
    webfinger-deployment:
      apiVersion: apps/v1
      kind: Deployment
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: webfinger
        template:
          metadata:
            labels:
              app.kubernetes.io/name: webfinger
          spec:
            containers:
              - name: webfinger
                image: denoland/deno:1.45.3
                args:
                  - run
                  - --allow-net
                  - /script/webfinger.ts
                livenessProbe:
                  httpGet:
                    path: /
                    port: 8000
                ports:
                  - name: http
                    containerPort: 8000
                volumeMounts:
                  - name: script
                    mountPath: /script
            volumes:
              - name: script
                configMap:
                  name: webfinger-script
    webfinger-script:
      apiVersion: v1
      kind: ConfigMap
      data:
        webfinger.ts: |
          // Simple proxy that returns Mastodon webfinger result, but also inserts OIDC discovery data
          Deno.serve(async (req: Request) => {
            const u = new URL(req.url);
            console.log(req.url);
            if (u.pathname == "/") {
              return new Response("OK"); // simple health-check for k8s
            }
            const resource = u.searchParams.get("resource");
            if (!resource) {
              return new Response(null, {status: 404});
            }
            const resp = await fetch(`https://mastodon.samcday.com/.well-known/webfinger?resource=${resource}`);
            if (resp.status !== 200) {
              return resp;
            }
            const mastodon = await resp.json();
            if (decodeURIComponent(resource) == "acct:me@samcday.com") {
              mastodon.links.push({
                rel: "http://openid.net/specs/connect/1.0/issuer",
                href: "https://dex.samcday.com",
              });
            }
            return new Response(JSON.stringify(mastodon), {
              headers: {
                "content-type": "application/json; charset=utf-8",
              },
            });
          });
    webfinger-service:
      apiVersion: v1
      kind: Service
      spec:
        ports:
          - port: 8000
            protocol: TCP
            targetPort: 8000
        selector:
          app.kubernetes.io/name: webfinger
